# Deployment para o banco de dados PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: {{ .Values.global.namespace | default "lanchonetews" }}
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
    spec:
      securityContext:
        fsGroup: 999  # Garante que o grupo do volume seja 'postgres'
      initContainers:
        - name: init-postgres-data
          image: busybox:1.36
          command: ["sh", "-c", "mkdir -p /var/lib/postgresql/data && chown 999:999 /var/lib/postgresql/data && chmod 700 /var/lib/postgresql/data && ls -ld /var/lib/postgresql/data"]
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          securityContext:
            runAsUser: 0  # Necessário para criar diretório e alterar permissões
      containers:
        - name: postgresql
          image: postgres:{{ .Values.postgresql.image.tag | default "latest" }}
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
              name: db
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: POSTGRES_DB
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.global.database.dbUser }}", "-d", "{{ .Values.global.database.DB_DATABASE }}"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "{{ .Values.global.database.dbUser }}", "-d", "{{ .Values.global.database.DB_DATABASE }}"]
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgresql-pvc
